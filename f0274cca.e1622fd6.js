(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{79:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return b}));var a=n(2),i=n(6),r=(n(0),n(82)),o={id:"CityScoPy"},c={unversionedId:"TUI/CityScoPy",id:"TUI/CityScoPy",isDocsHomePage:!1,title:"CityScoPy",description:"* => Download latest release <= *",source:"@site/docs/TUI/CityScoPy.md",slug:"/TUI/CityScoPy",permalink:"/docs/TUI/CityScoPy",editUrl:"https://github.com/CityScope/cityscope.github.io/docs/TUI/CityScoPy.md",version:"current",sidebar:"sidebar",previous:{title:"TUI Introduction",permalink:"/docs/TUI/TUI Introduction"},next:{title:"CityScope Types System",permalink:"/docs/modules/CityScope Types System"}},l=[{value:"Usage",id:"usage",children:[]},{value:"Class methods",id:"class-methods",children:[{value:"<code>Cityscopy.keystone()</code>",id:"cityscopykeystone",children:[]},{value:"<code>Cityscopy.scan()</code>",id:"cityscopyscan",children:[]},{value:"<code>Cityscopy.udp_listener()</code>",id:"cityscopyudp_listener",children:[]}]},{value:"Errors",id:"errors",children:[]},{value:"License",id:"license",children:[]},{value:"Contribution",id:"contribution",children:[]}],s={rightToc:l};function b(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},Object(r.b)("em",{parentName:"strong"}," ",Object(r.b)("a",Object(a.a)({parentName:"em"},{href:"https://github.com/CityScope/CS_Scanner_Python/releases/"}),"=> Download latest release <=")," "))),Object(r.b)("h4",{id:"a-tool-for-scanning-interactions-with-a-tangible-lego-grid-and-networking-mit-cityscope-projects-in-python"},"A tool for scanning interactions with a tangible LEGO grid and networking MIT CityScope Projects in Python"),Object(r.b)("p",null,"CityScoPy is the main component of an interactive MIT CityScope table.\nIt is used for initiating and later run a interactive CityScope instance in any arbitrary geolocated area in the world. CityScoPy can capture, key-stone, scan and send uniquely tagged arrays of 2-dimension physical bricks."),Object(r.b)("hr",null),Object(r.b)("h2",{id:"usage"},"Usage"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"install python 3.4 or higher"),Object(r.b)("li",{parentName:"ul"},"clone this repo")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{}),"$ git clone https://github.com/CityScope/CS_CityScoPy.git\n$ cd CS_CityScoPy\n")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"install packages. To produce a list of needed packages, use ",Object(r.b)("inlineCode",{parentName:"li"},"pipreqs"),", follow instructions ",Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/bndr/pipreqs"}),"https://github.com/bndr/pipreqs"),". Or, simply run the app and install packages as they appear as missing."),Object(r.b)("li",{parentName:"ul"},"tweak ",Object(r.b)("inlineCode",{parentName:"li"},"__settings__.json")," to fit your cityIO table setup. Read ",Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/cityscope/cs_cityio_backend/wiki"}),"cityIO documentation")," for proper data structure"),Object(r.b)("li",{parentName:"ul"},"in ",Object(r.b)("inlineCode",{parentName:"li"},"run.py")," setup a path to your settings file")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{}),'CITYSCOPY_SETTINGS_PATH = "__path__/__settings__.json"\n')),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"initiate the ",Object(r.b)("inlineCode",{parentName:"li"},"Cityscopy")," class (see ",Object(r.b)("inlineCode",{parentName:"li"},"run.py")," example)")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{}),"cityscopy = Cityscopy(CITYSCOPY_SETTINGS_PATH)\n")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"use one or more of the main methods. 'Blocking' means the method will run forever (while true loop). Advanced users can parallel blocking methods using multithreading.")),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Method"),Object(r.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Usage"),Object(r.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Blocking?"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"cityscopy.keystone()")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"initial keystone and save to file"),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"x")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"cityscopy.scan()")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"main scanning and sending method"),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"x")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"cityscopy.udp_listener()")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"emulate local UDP server listener"),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"x")))),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"in terminal run the tool using ",Object(r.b)("inlineCode",{parentName:"li"},"$ run.py"))),Object(r.b)("hr",null),Object(r.b)("h2",{id:"class-methods"},"Class methods"),Object(r.b)("h3",{id:"cityscopykeystone"},Object(r.b)("inlineCode",{parentName:"h3"},"Cityscopy.keystone()")),Object(r.b)("h5",{id:"initial-keystone-and-save-to-file"},"Initial keystone and save to file"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"the tool will start given a cam is connected and working"),Object(r.b)("li",{parentName:"ul"},"Select 4 corners ","[up right, up left, bottom right, bottom left, at this order]"," of keystone region\nNote: no need to exactly select the corners, as these are only initial guides for ",Object(r.b)("inlineCode",{parentName:"li"},"scanner")," method"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"keystone.txt")," and close")),Object(r.b)("h3",{id:"cityscopyscan"},Object(r.b)("inlineCode",{parentName:"h3"},"Cityscopy.scan()")),Object(r.b)("h5",{id:"main-scanning-and-sending-method"},"main scanning and sending method"),Object(r.b)("p",null,"Scanner will detect colors in arrays of 2d-pixel arrays. Than, these color arrays will be compared to list of ",Object(r.b)("inlineCode",{parentName:"p"},"tags")," attribute of a given ",Object(r.b)("inlineCode",{parentName:"p"},"__settings__.json")," file. Then the tool will return a list of ",Object(r.b)("inlineCode",{parentName:"p"},"type")," and ",Object(r.b)("inlineCode",{parentName:"p"},"rotation")," for each of the scanned arrays. This list is then converted to cityIO acceptable JSON format and can be sent using POST request."),Object(r.b)("h5",{id:"options-in-__settings__json"},"options in ",Object(r.b)("inlineCode",{parentName:"h5"},"__settings__.json")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{}),'{\n    "cityscopy": {\n        "cityscope_project_name": "cityscopy", // table name\n        "type": ["0", "1", "2", ...], // types names\n        "rotation": ["0", "1", "2", "3"], // default rotations (0, 90, 180, 270)\n        "nrows": 10, // number of columns to scan\n        "ncols": 10, // number of rows to scan\n        "camId": 0, // openCV will pick `camID` camera (usually 0)\n        "interval": 250, // in ms, how many time should this send the packet\n        "gui": true, // toggle GUI display\n        "cityio": true, // toggle UDP or cityIO delivery\n        "tags": [ // 16 digit strings of types being scanned [`1000000100000000`]\n            "0000000000000000",\n            "1111111111111111",\n            "1111111100000000",\n            ...\n        ],\n        "mirror_cam": false\n    }\n}\n\n')),Object(r.b)("p",null,"Tool will start scanning using whatever keystone data was stored in ",Object(r.b)("inlineCode",{parentName:"p"},"keystone.txt"),"\nmake corrections to the key stone using the sliders or keyboard using ",Object(r.b)("inlineCode",{parentName:"p"},"1,2,3,4")," to select a corner and ",Object(r.b)("inlineCode",{parentName:"p"},"[w,a,s,d]")," to move ",Object(r.b)("inlineCode",{parentName:"p"},"[up,left,down,right]")," the selected corner. Press ",Object(r.b)("inlineCode",{parentName:"p"},"k")," to save change to file and ",Object(r.b)("inlineCode",{parentName:"p"},"ctrl-c")," twice ","[in the terminal window]"," to exit program"),Object(r.b)("h4",{id:"output"},"output"),Object(r.b)("p",null,"the app will attempt sending the resulted scan to cityIO server. If successful, the following JSON format data will appear on the cityIO endpoint defined in ",Object(r.b)("inlineCode",{parentName:"p"},"settings.json")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{}),'\n{\n    "grid": [\n        [1, 0],\n        [1, 0],\n        [0, 0],\n        [4, 0],\n        [-1, -1],\n        [-1, -1], // no type was found will return -1 as type and -1 as rotation\n        ...\n    ],\n\n    ...\n    other cityIO data\n    ...\n}\n\n')),Object(r.b)("h3",{id:"cityscopyudp_listener"},Object(r.b)("inlineCode",{parentName:"h3"},"Cityscopy.udp_listener()")),Object(r.b)("h5",{id:"emulates-local-udp-server-listener"},"emulates local UDP server listener"),Object(r.b)("p",null,"simple helper method to emulate what a local UDP client might see if ",Object(r.b)("inlineCode",{parentName:"p"},"cityscopy")," would send scan over localhost"),Object(r.b)("h2",{id:"errors"},"Errors"),Object(r.b)("p",null,"OS, Python versions, openCV and peripheral devices such as webcams can sometimes cause issues. If you found and issue, please report it as a Github issue. Here're some encountered issues and their solutions:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"Mac OSX High Sierra blocks multithreading"),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"issue: ",Object(r.b)("inlineCode",{parentName:"li"},"objc[67570]: +[__NSPlaceholderDate initialize] may have been in progress in another thread when fork() was called.")),Object(r.b)("li",{parentName:"ul"},"solution: add to your ",Object(r.b)("inlineCode",{parentName:"li"},"$ .bash_profile")," the line ",Object(r.b)("inlineCode",{parentName:"li"},"export OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES"),". See more here: ",Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"https://stackoverflow.com/questions/50168647/multiprocessing-causes-python-to-crash-and-gives-an-error-may-have-been-in-progr"}),"https://stackoverflow.com/questions/50168647/multiprocessing-causes-python-to-crash-and-gives-an-error-may-have-been-in-progr")))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"Webcam crash on init, despite working on other apps"),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"issue: camera is not configured in ",Object(r.b)("inlineCode",{parentName:"li"},"settings.json")),Object(r.b)("li",{parentName:"ul"},"solution: make sure to test different ",Object(r.b)("inlineCode",{parentName:"li"},"camId")," values. Your OS might put the camera after another device (2,3..)")))),Object(r.b)("hr",null),Object(r.b)("h2",{id:"license"},"License"),Object(r.b)("p",null,"Please see ",Object(r.b)("inlineCode",{parentName:"p"},"LICENSE")," file for more details.This tool may require libraries which are subject to own licensing."),Object(r.b)("h2",{id:"contribution"},"Contribution"),Object(r.b)("p",null,"Please use GitHub Issues and PR interface for contributions."),Object(r.b)("hr",null),Object(r.b)("p",null,"Maintained by ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"http://arielnoyman.com"}),"Ariel Noyman")),Object(r.b)("p",null,Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/CityScope/CS_Scanner_Python/graphs/contributors"}),"Repo contributors")))}b.isMDXComponent=!0},82:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return m}));var a=n(0),i=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=i.a.createContext({}),b=function(e){var t=i.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},p=function(e){var t=b(e.components);return i.a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},d=i.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,o=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=b(n),d=a,m=p["".concat(o,".").concat(d)]||p[d]||u[d]||r;return n?i.a.createElement(m,c(c({ref:t},s),{},{components:n})):i.a.createElement(m,c({ref:t},s))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=d;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var s=2;s<r;s++)o[s]=n[s];return i.a.createElement.apply(null,o)}return i.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);