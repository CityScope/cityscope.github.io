"use strict";(self.webpackChunkcityscope_docs=self.webpackChunkcityscope_docs||[]).push([[949],{8649:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>c,toc:()=>a});var s=i(4848),t=i(8453);const o={id:"CityScoPy"},r=void 0,c={id:"tanglibe user interfaces/CityScoPy",title:"CityScoPy",description:"Download latest release",source:"@site/docs/tanglibe user interfaces/CityScoPy.md",sourceDirName:"tanglibe user interfaces",slug:"/tanglibe user interfaces/CityScoPy",permalink:"/tanglibe user interfaces/CityScoPy",draft:!1,unlisted:!1,editUrl:"https://github.com/CityScope/cityscope.github.io/docs/tanglibe user interfaces/CityScoPy.md",tags:[],version:"current",frontMatter:{id:"CityScoPy"},sidebar:"sidebar",previous:{title:"Tangible User Interfaces",permalink:"/category/tangible-user-interfaces"},next:{title:"RoboScope",permalink:"/tanglibe user interfaces/RoboScope"}},l={},a=[{value:"A tool for scanning interactions with a tangible LEGO grid and networking MIT CityScope Projects in Python",id:"a-tool-for-scanning-interactions-with-a-tangible-lego-grid-and-networking-mit-cityscope-projects-in-python",level:4},{value:"Usage",id:"usage",level:2},{value:"Class methods",id:"class-methods",level:2},{value:"<code>Cityscopy.keystone()</code>",id:"cityscopykeystone",level:3},{value:"Initial keystone and save to file",id:"initial-keystone-and-save-to-file",level:5},{value:"<code>Cityscopy.scan()</code>",id:"cityscopyscan",level:3},{value:"main scanning and sending method",id:"main-scanning-and-sending-method",level:5},{value:"options in <code>__settings__.json</code>",id:"options-in-__settings__json",level:5},{value:"output",id:"output",level:4},{value:"<code>Cityscopy.udp_listener()</code>",id:"cityscopyudp_listener",level:3},{value:"emulates local UDP server listener",id:"emulates-local-udp-server-listener",level:5},{value:"Errors",id:"errors",level:2},{value:"License",id:"license",level:2},{value:"Contribution",id:"contribution",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",h5:"h5",hr:"hr",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["*** ",(0,s.jsx)(n.a,{href:"https://github.com/CityScope/CS_Scanner_Python/releases/",children:"Download latest release "})," ***"]}),"\n",(0,s.jsx)(n.h4,{id:"a-tool-for-scanning-interactions-with-a-tangible-lego-grid-and-networking-mit-cityscope-projects-in-python",children:"A tool for scanning interactions with a tangible LEGO grid and networking MIT CityScope Projects in Python"}),"\n",(0,s.jsx)(n.p,{children:"CityScoPy is the main component of an interactive MIT CityScope table.\nIt is used for initiating and later run a interactive CityScope instance in any arbitrary geolocated area in the world. CityScoPy can capture, key-stone, scan and send uniquely tagged arrays of 2-dimension physical bricks."}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"install python 3.4 or higher"}),"\n",(0,s.jsx)(n.li,{children:"clone this repo"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"$ git clone https://github.com/CityScope/CS_CityScoPy.git\n$ cd CS_CityScoPy\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["install packages. To produce a list of needed packages, use ",(0,s.jsx)(n.code,{children:"pipreqs"}),", follow instructions ",(0,s.jsx)(n.a,{href:"https://github.com/bndr/pipreqs",children:"https://github.com/bndr/pipreqs"}),". Or, simply run the app and install packages as they appear as missing."]}),"\n",(0,s.jsxs)(n.li,{children:["tweak ",(0,s.jsx)(n.code,{children:"__settings__.json"})," to fit your cityIO table setup. Read ",(0,s.jsx)(n.a,{href:"https://github.com/cityscope/cs_cityio_backend/wiki",children:"cityIO documentation"})," for proper data structure"]}),"\n",(0,s.jsxs)(n.li,{children:["in ",(0,s.jsx)(n.code,{children:"run.py"})," setup a path to your settings file"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'CITYSCOPY_SETTINGS_PATH = "__path__/__settings__.json"\n'})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["initiate the ",(0,s.jsx)(n.code,{children:"Cityscopy"})," class (see ",(0,s.jsx)(n.code,{children:"run.py"})," example)"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"cityscopy = Cityscopy(CITYSCOPY_SETTINGS_PATH)\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"use one or more of the main methods. 'Blocking' means the method will run forever (while true loop). Advanced users can parallel blocking methods using multithreading."}),"\n"]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Method"}),(0,s.jsx)(n.th,{children:"Usage"}),(0,s.jsx)(n.th,{children:"Blocking?"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"cityscopy.keystone()"})}),(0,s.jsx)(n.td,{children:"initial keystone and save to file"}),(0,s.jsx)(n.td,{children:"x"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"cityscopy.scan()"})}),(0,s.jsx)(n.td,{children:"main scanning and sending method"}),(0,s.jsx)(n.td,{children:"x"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"cityscopy.udp_listener()"})}),(0,s.jsx)(n.td,{children:"emulate local UDP server listener"}),(0,s.jsx)(n.td,{children:"x"})]})]})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["in terminal run the tool using ",(0,s.jsx)(n.code,{children:"$ run.py"})]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"class-methods",children:"Class methods"}),"\n",(0,s.jsx)(n.h3,{id:"cityscopykeystone",children:(0,s.jsx)(n.code,{children:"Cityscopy.keystone()"})}),"\n",(0,s.jsx)(n.h5,{id:"initial-keystone-and-save-to-file",children:"Initial keystone and save to file"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"the tool will start given a cam is connected and working"}),"\n",(0,s.jsxs)(n.li,{children:["Select 4 corners [up right, up left, bottom right, bottom left, at this order] of keystone region\nNote: no need to exactly select the corners, as these are only initial guides for ",(0,s.jsx)(n.code,{children:"scanner"})," method"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"keystone.txt"})," and close"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"cityscopyscan",children:(0,s.jsx)(n.code,{children:"Cityscopy.scan()"})}),"\n",(0,s.jsx)(n.h5,{id:"main-scanning-and-sending-method",children:"main scanning and sending method"}),"\n",(0,s.jsxs)(n.p,{children:["Scanner will detect colors in arrays of 2d-pixel arrays. Then, these color arrays will be compared to list of ",(0,s.jsx)(n.code,{children:"tags"})," attribute of a given ",(0,s.jsx)(n.code,{children:"__settings__.json"})," file. Then the tool will return a list of ",(0,s.jsx)(n.code,{children:"type"})," and ",(0,s.jsx)(n.code,{children:"rotation"})," for each of the scanned arrays. This list is then converted to cityIO acceptable JSON format and can be sent using POST request."]}),"\n",(0,s.jsxs)(n.h5,{id:"options-in-__settings__json",children:["options in ",(0,s.jsx)(n.code,{children:"__settings__.json"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'{\n    "cityscopy": {\n        "cityscope_project_name": "cityscopy", // table name\n        "type": ["0", "1", "2", ...], // types names\n        "rotation": ["0", "1", "2", "3"], // default rotations (0, 90, 180, 270)\n        "nrows": 10, // number of columns to scan\n        "ncols": 10, // number of rows to scan\n        "cell_gap": 10, // spacing between grid fields when using physical grid\n        "camId": 0, // openCV will pick `camID` camera (usually 0)\n        "interval": 250, // in ms, how many time should this send the packet\n        "gui": true, // toggle GUI display\n        "cityio": true, // toggle UDP or cityIO delivery\n        "tags": [ // 16 digit strings of types being scanned [`1000000100000000`]\n            "0000000000000000",\n            "1111111111111111",\n            "1111111100000000",\n            ...\n        ],\n        "mirror_cam": false\n    }\n}\n\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Tool will start scanning using whatever keystone data was stored in ",(0,s.jsx)(n.code,{children:"keystone.txt"}),"\nmake corrections to the key stone using the sliders or keyboard using ",(0,s.jsx)(n.code,{children:"1,2,3,4"})," to select a corner and ",(0,s.jsx)(n.code,{children:"[w,a,s,d]"})," to move ",(0,s.jsx)(n.code,{children:"[up,left,down,right]"})," the selected corner. Press ",(0,s.jsx)(n.code,{children:"k"})," to save change to file and ",(0,s.jsx)(n.code,{children:"ctrl-c"})," twice [in the terminal window] to exit program"]}),"\n",(0,s.jsx)(n.h4,{id:"output",children:"output"}),"\n",(0,s.jsxs)(n.p,{children:["the app will attempt sending the resulted scan to cityIO server. If successful, the following JSON format data will appear on the cityIO endpoint defined in ",(0,s.jsx)(n.code,{children:"settings.json"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'\n{\n    "grid": [\n        [1, 0],\n        [1, 0],\n        [0, 0],\n        [4, 0],\n        [-1, -1],\n        [-1, -1], // no type was found will return -1 as type and -1 as rotation\n        ...\n    ],\n\n    ...\n    other cityIO data\n    ...\n}\n\n'})}),"\n",(0,s.jsx)(n.h3,{id:"cityscopyudp_listener",children:(0,s.jsx)(n.code,{children:"Cityscopy.udp_listener()"})}),"\n",(0,s.jsx)(n.h5,{id:"emulates-local-udp-server-listener",children:"emulates local UDP server listener"}),"\n",(0,s.jsxs)(n.p,{children:["simple helper method to emulate what a local UDP client might see if ",(0,s.jsx)(n.code,{children:"cityscopy"})," would send scan over localhost"]}),"\n",(0,s.jsx)(n.h2,{id:"errors",children:"Errors"}),"\n",(0,s.jsx)(n.p,{children:"OS, Python versions, openCV and peripheral devices such as webcams can sometimes cause issues. If you found and issue, please report it as a Github issue. Here're some encountered issues and their solutions:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Mac OSX High Sierra blocks multithreading"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["issue: ",(0,s.jsx)(n.code,{children:"objc[67570]: +[__NSPlaceholderDate initialize] may have been in progress in another thread when fork() was called."})]}),"\n",(0,s.jsxs)(n.li,{children:["solution: add to your ",(0,s.jsx)(n.code,{children:"$ .bash_profile"})," the line ",(0,s.jsx)(n.code,{children:"export OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES"}),". See more here: ",(0,s.jsx)(n.a,{href:"https://stackoverflow.com/questions/50168647/multiprocessing-causes-python-to-crash-and-gives-an-error-may-have-been-in-progr",children:"https://stackoverflow.com/questions/50168647/multiprocessing-causes-python-to-crash-and-gives-an-error-may-have-been-in-progr"})]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Webcam crash on init, despite working on other apps"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["issue: camera is not configured in ",(0,s.jsx)(n.code,{children:"settings.json"})]}),"\n",(0,s.jsxs)(n.li,{children:["solution: make sure to test different ",(0,s.jsx)(n.code,{children:"camId"})," values. Your OS might put the camera after another device (2,3..)"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"license",children:"License"}),"\n",(0,s.jsxs)(n.p,{children:["Please see ",(0,s.jsx)(n.code,{children:"LICENSE"})," file for more details.This tool may require libraries which are subject to own licensing."]}),"\n",(0,s.jsx)(n.h2,{id:"contribution",children:"Contribution"}),"\n",(0,s.jsx)(n.p,{children:"Please use GitHub Issues and PR interface for contributions."}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.p,{children:["Maintained by ",(0,s.jsx)(n.a,{href:"http://arielnoyman.com",children:"Ariel Noyman"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://github.com/CityScope/CS_Scanner_Python/graphs/contributors",children:"Repo contributors"})})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>c});var s=i(6540);const t={},o=s.createContext(t);function r(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);