"use strict";(self.webpackChunkcityscope_docs=self.webpackChunkcityscope_docs||[]).push([[694],{8408:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>d});var o=t(4848),a=t(8453);const i={sidebar_position:3},r=void 0,s={id:"modules/brix/Module example",title:"Module example",description:"In this section, we present how to code an example DeckGL module on Brix WS that connects with a project in CityScopeJS and displays various visualizations.",source:"@site/docs/modules/brix/Module example.md",sourceDirName:"modules/brix",slug:"/modules/brix/Module example",permalink:"/modules/brix/Module example",draft:!1,unlisted:!1,editUrl:"https://github.com/CityScope/cityscope.github.io/docs/modules/brix/Module example.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"sidebar",previous:{title:"DeckGL Modules",permalink:"/modules/brix/DeckGL Modules"},next:{title:"Introduction",permalink:"/modules/Core Modules/Introduction"}},l={},d=[{value:"Basic structure of a module",id:"basic-structure-of-a-module",level:2},{value:"DeckGL Modules: adding layers",id:"deckgl-modules-adding-layers",level:2},{value:"Connecting with CityIO",id:"connecting-with-cityio",level:2},{value:"Visualizing the result in CityScopeJS",id:"visualizing-the-result-in-cityscopejs",level:2}];function c(e){const n={code:"code",h2:"h2",img:"img",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:"In this section, we present how to code an example DeckGL module on Brix WS that connects with a project in CityScopeJS and displays various visualizations."}),"\n",(0,o.jsx)(n.p,{children:"Currently, Brix WS is not published as a Python library available through pip. Consequently, the first step would be to download the code from GitHub."}),"\n",(0,o.jsx)(n.h2,{id:"basic-structure-of-a-module",children:"Basic structure of a module"}),"\n",(0,o.jsx)(n.p,{children:"The basic structure of any module will be as follows:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"\nfrom brix.classes import DeckGLIndicator\n\nimport random\nfrom numpy import mean\nclass ExampleModule(DeckGLIndicator):\n\n    def setup(self):\n        self.name = 'example'\n\n    def load_module(self):\n        pass\n\n    def return_indicator(self, geogrid_data):\n        # Module code\n"})}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"setup"})," function will be used to define the values of some variables, such as the name of the module."]}),"\n",(0,o.jsxs)(n.p,{children:["Data loading actions should go in the ",(0,o.jsx)(n.code,{children:"load_module"})," function"]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"return_indicator"})," will be the main function of any module, in this one, you can read the data of the grid realted to the project, executed the necessary calculations to obtain the module output, and return it in a proper structure to be sent back to CityIO."]}),"\n",(0,o.jsx)(n.h2,{id:"deckgl-modules-adding-layers",children:"DeckGL Modules: adding layers"}),"\n",(0,o.jsx)(n.p,{children:"In order to generate a DeckGL module, we need to send back to CityIO all the layers that will compose the visualization in CityScopeJS. In this example, we use different types of layers to generate a random indicator: heatmaps, columns, arc, and geojson."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'    def return_indicator(self, geogrid_data):\n\n        data = []\n\n        #HEATMAP\n        features = []\n        for cell in geogrid_data:\n            feature = {}\n            lat,lon = zip(*cell[\'geometry\'][\'coordinates\'][0])\n            lat,lon = mean(lat),mean(lon)\n            feature[\'coordinates\'] = [lat,lon]\n            feature[\'weight\'] = random.random()*10\n            features.append(feature)\n    \n        data.append({"type":"heatmap","data":features,"properties":{}}) \n\n        #ARC\n        arc_data = [{\n            \'inbound\': 72633,\n            \'outbound\': 74735,\n            \'from\': {\n                \'name\': \'MIT Media Lab\',\n                \'coordinates\': [-71.08727713271684, 42.36041314214483]\n            },\n            \'to\': {\n                \'name\': \'MIT CSAIL\',\n                \'coordinates\': [-71.09060913355545, 42.36168851347742]\n            }\n        }]\n        data.append({"type":"arc","data":arc_data,"properties":{"width":1}}) \n\n        #COLUMNS\n        features_columns = []\n        for cell in geogrid_data:\n            feature = {}\n            lat,lon = zip(*cell[\'geometry\'][\'coordinates\'][0])\n            lat,lon = mean(lat),mean(lon)\n            feature[\'centroid\'] = [lat,lon]\n            feature[\'value\'] = random.random()*300\n            features_columns.append(feature)\n    \n        data.append({"type":"column","data":features_columns,"properties":{}}) \n\n        #GEOJSON\n        geojson_data = {"type": "FeatureCollection","features": [{"type": "Feature","properties": {},"geometry": {"coordinates": [[[-71.09236362469034,42.35778603125499],[-71.08986747898945,42.3585765398804],[-71.0901949616614,42.35911429516614],[-71.09076987568574,42.358931458885564],[-71.09126473839052,42.35978648280218],[-71.09261105604213,42.35938317108344],[-71.09214530290863,42.3584421003398],[-71.09268382996976,42.35830766051154],[-71.09236362469034,42.35778603125499]]],"type": "Polygon"}}]}\n   \n        data.append({"type":"geojsonbase","data":geojson_data,"properties":{}}) \n\n\n        return data\n'})}),"\n",(0,o.jsx)(n.p,{children:"The straightforward solution is, for each layer, calculate the necessary data, and then append the layer to the ouput array."}),"\n",(0,o.jsx)(n.p,{children:"It is important to note that this method could be follow with any set of the available layers."}),"\n",(0,o.jsx)(n.h2,{id:"connecting-with-cityio",children:"Connecting with CityIO"}),"\n",(0,o.jsx)(n.p,{children:"Connecting a module to a CityScope project will only require  to create a Handler, indicating the name of the table that you want to connect to. Then, add the indicator (module) previously defined to the handler, and start it."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"from brix.classes import Handler\n\nindicator = ExampleModule()\n\nH = Handler(quietly=False,\n            table_name='walkability')\nH.add_indicators([\n        indicator\n        ])\nH.listen()\n"})}),"\n",(0,o.jsx)(n.h2,{id:"visualizing-the-result-in-cityscopejs",children:"Visualizing the result in CityScopeJS"}),"\n",(0,o.jsx)(n.p,{children:"When everything is done, and you run the code, this will send to CityScopeJS the result of the module."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"Subscription Request",src:t(181).A+"",width:"3092",height:"1690"})})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},181:(e,n,t)=>{t.d(n,{A:()=>o});const o=t.p+"assets/images/deckgl-module-c3c9253421e0d70d9904c067e5711d7e.png"},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>s});var o=t(6540);const a={},i=o.createContext(a);function r(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);