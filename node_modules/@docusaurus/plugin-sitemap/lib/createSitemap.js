"use strict";
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("@docusaurus/utils");
const xml_1 = require("./xml");
const createSitemapItem_1 = require("./createSitemapItem");
// Maybe we want to add a routeConfig.metadata.noIndex instead?
// But using Helmet is more reliable for third-party plugins...
function isNoIndexMetaRoute({ head, route, }) {
    const isNoIndexMetaTag = ({ name, content, }) => {
        if (!name || !content) {
            return false;
        }
        return (
        // meta name is not case-sensitive
        name.toLowerCase() === 'robots' &&
            // Robots directives are not case-sensitive
            content.toLowerCase().includes('noindex'));
    };
    // https://github.com/staylor/react-helmet-async/pull/167
    const meta = head[route]?.meta.toComponent();
    return meta?.some((tag) => isNoIndexMetaTag({ name: tag.props.name, content: tag.props.content }));
}
// Not all routes should appear in the sitemap, and we should filter:
// - parent routes, used for layouts
// - routes matching options.ignorePatterns
// - routes with no index metadata
function getSitemapRoutes({ routes, head, options }) {
    const { ignorePatterns } = options;
    const ignoreMatcher = (0, utils_1.createMatcher)(ignorePatterns);
    function isRouteExcluded(route) {
        return (ignoreMatcher(route.path) || isNoIndexMetaRoute({ head, route: route.path }));
    }
    return (0, utils_1.flattenRoutes)(routes).filter((route) => !isRouteExcluded(route));
}
async function createSitemapItems(params) {
    const sitemapRoutes = getSitemapRoutes(params);
    if (sitemapRoutes.length === 0) {
        return [];
    }
    return Promise.all(sitemapRoutes.map((route) => (0, createSitemapItem_1.createSitemapItem)({
        route,
        siteConfig: params.siteConfig,
        options: params.options,
    })));
}
async function createSitemap(params) {
    const items = await createSitemapItems(params);
    if (items.length === 0) {
        return null;
    }
    const xmlString = await (0, xml_1.sitemapItemsToXmlString)(items, {
        lastmod: params.options.lastmod,
    });
    return xmlString;
}
exports.default = createSitemap;
